name: "Infra"

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  # terraform:
  #   name: "Run Terraform"
  #   runs-on: ubuntu-latest
  #   env:
  #     working-directory: terraform
          
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.2.5
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init
  #       working-directory: "${{ env.working-directory }}/application"
      
  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color
  #       working-directory: "${{ env.working-directory }}/application"

  #     - name: Terraform Plan
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan -no-color -input=false
  #       continue-on-error: true
  #       working-directory: "${{ env.working-directory }}/application"

  #     - name: Update Pull Request
  #       uses: actions/github-script@v6      
  #       if: github.event_name == 'pull_request'
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  #           <details><summary>Show Plan</summary>
  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           \`\`\`
  #           </details>
  #           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #       run: terraform apply -auto-approve -input=false
  #       working-directory: "${{ env.working-directory }}/application"

  pluralith:
    needs: terraform
    runs-on: ubuntu-latest
    env:
      working-directory: terraform

    name: Run Pluralith
    steps:
      - name: Check out repository
        uses: actions/checkout@v1

      # Set up AWS credentials (using the aws-actions/configure-aws-credentials action)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        # See https://github.com/infracost/actions/tree/master/setup for other inputs
        # If you can't use this action, see Docker images in https://infracost.io/cicd
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          currency: ${{ secrets.INFRACOST_CURRENCY }}

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false # This is recommended so the `terraform show` command outputs valid JSON
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      # Init Terraform project
      - name: Terraform Init
        run: terraform init
        working-directory: "${{ env.working-directory }}/application"

      # Set up and authenticate Pluralith
      - name: Pluralith Init
        uses: Pluralith/actions/init@v1.1.0
        with:
          terraform-path: "${{ env.working-directory }}/application"
          api-key: ${{ secrets.PLURALITH_API_KEY }}
          project-id: ${{ secrets.PLURALITH_PROJECT_ID }}

      # Run Pluralith to generate an infrastructure diagram and comment body
      - name: Pluralith Run
        uses: Pluralith/actions/run@v1.1.0
        with:
          terraform-path: "${{ env.working-directory }}/application"
          show-changes: true
          show-drift: true
          show-costs: true # Requires Infracost to be set up in your pipeline

      # Post the generated diagram as a GitHub comment
      - name: Pluralith Comment
        uses: Pluralith/actions/comment@v1.1.0
        with:
          terraform-path: "${{ env.working-directory }}/application"

  # infracost:
  #   name: Run Infracost
  #   runs-on: ubuntu-latest

  #   env:
  #     TF_ROOT: terraform/application
  #     # If you're using Terraform Cloud/Enterprise and have variables or private modules stored
  #     # on there, specify the following to automatically retrieve the variables:
  #     #   INFRACOST_TERRAFORM_CLOUD_TOKEN: ${{ secrets.TFC_TOKEN }}
  #     #   INFRACOST_TERRAFORM_CLOUD_HOST: app.terraform.io # Change this if you're using Terraform Enterprise

  #   steps:
  #     # If you use private modules, add an environment variable or secret
  #     # called GIT_SSH_KEY with your private key, so Infracost can access
  #     # private repositories (similar to how Terraform/Terragrunt does).
  #     # - name: add GIT_SSH_KEY
  #     #   run: |
  #     #     ssh-agent -a $SSH_AUTH_SOCK
  #     #     mkdir -p ~/.ssh
  #     #     echo "${{ secrets.GIT_SSH_KEY }}" | tr -d '\r' | ssh-add -
  #     #     ssh-keyscan github.com >> ~/.ssh/known_hosts

  #     - name: Setup Infracost
  #       uses: infracost/actions/setup@v2
  #       # See https://github.com/infracost/actions/tree/master/setup for other inputs
  #       # If you can't use this action, see Docker images in https://infracost.io/cicd
  #       with:
  #         api-key: ${{ secrets.INFRACOST_API_KEY }}
  #         currency: ${{ secrets.INFRACOST_CURRENCY }}          

  #     # Checkout the base branch of the pull request (e.g. main/master).
  #     - name: Checkout base branch
  #       uses: actions/checkout@v2
  #       with:
  #         ref: '${{ github.event.pull_request.base.ref }}'

  #     # Generate Infracost JSON file as the baseline.
  #     - name: Generate Infracost cost estimate baseline
  #       run: |
  #         infracost breakdown --path=${TF_ROOT} \
  #                             --format=json \
  #                             --out-file=/tmp/infracost-base.json

  #     # Checkout the current PR branch so we can create a diff.
  #     - name: Checkout PR branch
  #       uses: actions/checkout@v2

  #     # Generate an Infracost diff and save it to a JSON file.
  #     - name: Generate Infracost diff
  #       run: |
  #         infracost diff --path=${TF_ROOT} \
  #                         --format=json \
  #                         --compare-to=/tmp/infracost-base.json \
  #                         --out-file=/tmp/infracost.json

  #     # Posts a comment to the PR using the 'update' behavior.
  #     # This creates a single comment and updates it. The "quietest" option.
  #     # The other valid behaviors are:
  #     #   delete-and-new - Delete previous comments and create a new one.
  #     #   hide-and-new - Minimize previous comments and create a new one.
  #     #   new - Create a new cost estimate comment on every push.
  #     # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options.
  #     # The INFRACOST_ENABLE_CLOUD‚Äã=true section instructs the CLI to send its JSON output to Infracost Cloud.
  #     #   This SaaS product gives you visibility across all changes in a dashboard. The JSON output does not
  #     #   contain any cloud credentials or secrets.
  #     - name: Post Infracost comment
  #       run: |
  #           INFRACOST_ENABLE_CLOUD=true infracost comment github --path=/tmp/infracost.json \
  #                                     --repo=$GITHUB_REPOSITORY \
  #                                     --github-token=${{github.token}} \
  #                                     --pull-request=${{github.event.pull_request.number}} \
  #                                     --behavior=update


